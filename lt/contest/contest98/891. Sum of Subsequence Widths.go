package main

import (
    "sort"
    "fmt"
)

func main() {
    fmt.Println(sumSubseqWidths([]int{2, 1, 3}))
    // 136988321
    fmt.Println(sumSubseqWidths([]int{96, 87, 191, 197, 40, 101, 108, 35, 169, 50, 168, 182, 95, 80, 144, 43, 18, 60, 174, 13, 77, 173, 38, 46, 80, 117, 13, 19, 11, 6, 13, 118, 39, 80, 171, 36, 86, 156, 165, 190, 53, 49, 160, 192, 57, 42, 97, 35, 124, 200, 84, 70, 145, 180, 54, 141, 159, 42, 66, 66, 25, 95, 24, 136, 140, 159, 71, 131, 5, 140, 115, 76, 151, 137, 63, 47, 69, 164, 60, 172, 153, 183, 6, 70, 40, 168, 133, 45, 116, 188, 20, 52, 70, 156, 44, 27, 124, 59, 42, 172}))
    // 913050936
    fmt.Println(sumSubseqWidths([]int{57,154,18,118,113,276,265,73,176,37,82,275,99,341,107,281,284,31,320,109,80,152,234,175,166,243,368,89,58,389,334,145,346,307,192,172,17,242,114,363,75,5,284,331,7,46,344,307,330,287,171,26,214,245,78,184,189,178,15,286,361,257,86,67,77,96,163,23,108,98,323,316,10,341,286,33,330,309,387,267,85,358,125,7,67,237,160,335,393,263,271,267,291,208,77,394,176,314,64,28,308,351,38,232,208,130,337,98,208,68,302,189,174,273,51,370,371,304,288,231,220,315,193,16,284,211,63,343,64,153,44,75,73,12,2,144,16,399,239,255,235,116,106,121,292,2,88,380,281,247,22,395,355,332,48,11,31,153,354,185,294,78,37,125,70,23,276,400,71,381,46,351,170,287,390,47,133,140,145,114,92,81,301,192,350,10,50,350,93,165,228,41,207,397,284,97,308,314,225,352}))
}
func sumSubseqWidths(A []int) int {
    sort.Ints(A)  // 排序后可以确定最大最小值
    ret,factor := 0,1
    for i := 0; i < len(A); i++ {
        ret = (ret + factor*A[i]-factor*A[len(A)-1-i]) % (1e9+7)
        factor = (factor*2)% (1e9+7)
    }
    return ret % (1e9+7)
}
func sumSubseqWidthsDirect(A []int) int {
    // O(N2),超时了
    sort.Ints(A)
    var ret uint64
    cache := make(map[int]uint64) // avoid repeat calculation
    for i := 0; i < len(A); i++ {
        for j := i + 1; j < len(A); j++ {
            if cache[j-i-1] <= 0 {
                cache[j-i-1]=1
                for ii := 0; ii < j-i-1; ii++ {cache[j-i-1] = (cache[j-i-1] * 2) % (1e9+7)}
            }
            ret = (ret + uint64(A[j] - A[i])*cache[j-i-1]) % (1e9+7)
        }
    }
    return int(ret % (1e9+7))
}
