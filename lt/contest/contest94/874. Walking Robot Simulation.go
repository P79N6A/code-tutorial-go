package main

import "fmt"
import "sort"

func main() {
        fmt.Println(robotSim([]int{4,-1,4,-2,4},[][]int{
                []int{2,4},
        }))
        //[3,7,5,7,3,-2,8,6,5,-1,-1,5,7,5,-1,-1,3,-2,7,5,5,-2,6,9,9,-2,8,2,-2,-2,2,9,6,2,9,-1,-1,6,-2,-2,3,6,-1,6,7,8,1,8,5,3,-1,7,3,9,-1,8,7,-1,-2,-2,8,-2,-2,4,-2,9,-2,9,5,-2,3,5,1,9,9,-2,5,1,3,-1,6,-2,2,4,2,-2,7,4,9,1,9,3,9,4,5,-2,1,6,7,2]
        //[[41,-9],[-91,93],[99,-59],[-56,-64],[32,-16],[-8,56],[-27,2],[-31,89],[98,49],[0,-86],[86,95],[-52,66],[9,26],[89,-51],[-77,-22],[34,-32],[-22,-41],[40,-72],[-61,62],[22,-62],[72,91],[81,-33],[-25,60],[20,64],[93,100],[73,22],[-39,57],[55,51],[-12,-49],[-84,99],[-59,39],[23,86],[-53,-100],[-12,-31],[-20,65],[-98,-39],[69,59],[-33,-32],[63,26],[-90,27],[33,71],[37,88],[-73,-47],[2,35],[57,-88],[-83,46],[92,76],[-29,10],[-73,51],[4,-22],[89,7],[-19,-24],[-78,-22],[30,61],[37,-49],[54,-16],[-67,-80],[-75,-5],[-92,43],[-39,9],[50,28],[-88,83],[-28,23],[-47,-87],[9,54],[2,-68],[48,62],[34,47],[69,44],[59,92],[-60,-26],[5,-12],[35,17],[11,86],[91,-17],[25,92],[35,-44],[-85,63],[-84,77],[67,-25],[-13,-84],[48,-67],[-66,-14],[-13,85],[-50,-100],[-66,-58],[-32,-52],[-66,-8],[4,27],[24,-48],[-20,-40],[76,-86],[-55,-99],[39,96],[-95,-10],[-74,-14],[40,-57],[53,69],[3,30],[8,-91],[-36,98],[-60,100],[32,-32],[-27,-45],[12,80],[-68,17],[-24,55],[-72,-29],[12,-53],[37,91],[-30,-76],[-41,21],[87,47],[28,-52],[-17,100],[67,87],[27,88],[95,34],[56,-49],[-11,-77],[60,-95],[84,98],[-81,-17],[69,66],[-41,-9],[99,-89],[83,-38],[14,-57],[-3,24],[-62,23],[-10,-87],[38,-46],[63,-7],[-52,53],[27,-47],[49,12],[-58,-55],[-15,-27],[34,-54],[2,28],[47,-10],[-6,-85],[13,-71],[93,-34],[-35,-36],[61,-5],[-71,-51],[-83,-53],[-26,-84],[-22,-20],[-14,-73],[78,46],[75,20],[-93,-75],[38,-50],[-52,4],[-87,-14],[52,93],[61,-21],[15,7],[-60,-38],[-93,-38],[-37,-76],[-80,-50],[-85,-74],[46,43],[-19,-74],[33,-2],[32,70],[65,58],[-49,-34],[79,-94],[24,17],[-4,-72],[-40,83],[-1,52],[91,-38],[17,41],[72,-7],[-87,20],[37,84],[-9,-96],[-84,-93],[-96,66],[13,-20],[-84,24],[-51,-13],[6,-62],[-65,-61],[-89,64],[77,0],[-60,2],[-29,-83],[-79,33],[26,83],[-66,-34],[66,53],[2,-39],[72,93],[75,61]]
}

var xobs map[int][]int
var yobs map[int][]int
var xdirection [][]int = [][]int{{0,1},{1,0},{0,-1},{-1,0}}
func robotSim(commands []int, obstacles [][]int) int {
        xobs = make(map[int][]int)
        yobs = make(map[int][]int)
        for _,obs := range obstacles {
                if _,e :=xobs[obs[0]];!e {
                        xobs[obs[0]]=make([]int,0)
                }
                xobs[obs[0]] = append(xobs[obs[0]],obs[1])
                if _,e :=yobs[obs[1]];!e {
                        yobs[obs[1]]=make([]int,0)
                }
                yobs[obs[1]] = append(yobs[obs[1]],obs[0])
        }
        for _,x := range xobs {
                sort.Ints(x)
        }
        for _,y := range yobs {
                sort.Ints(y)
        }
        fmt.Println(xobs)
        fmt.Println(yobs)
        var xxcur int = 0

        maxd := 0
        x,y := 0,0
        for _,c := range commands {
                if c == -1 {
                        xxcur = (xxcur+1)%4
                } else if c == -2 {
                        xxcur = xxcur-1
                        if xxcur<0{xxcur += 4}
                } else {
                        fmt.Println(x,y,xxcur,c)
                        x,y = nextpos(x,y,c,xxcur)
                        d := dis(x,y)
                        if maxd<d {
                                maxd=d
                        }
                        fmt.Println(x,y,xxcur,c)
                }
        }
        return maxd
}
func nextpos(sx,sy,step,dir int) (int,int) {
        dx,dy := sx+xdirection[dir][0]*step,sy+xdirection[dir][1]*step
        fmt.Println("XXXX",sx,sy,dx,dy)
        if dx==sx {
                if dy > sy {
                        dd := dy
                        for i:=len(xobs[sx])-1;i>=0;i-- {
                                if xobs[sx][i]<=dd &&xobs[sx][i]>sy {
                                        dd = xobs[sx][i]-1
                                }
                        }
                        return dx,dd
                } else {
                        dd := dy
                        for i:=0;i<len(xobs[sx]);i++ {
                                if xobs[sx][i]>=dd&&xobs[sx][i]<sy {
                                        dd = xobs[sx][i]+1
                                }
                        }
                        return dx,dd
                }
        } else {
                if dx > sx {
                        dd := dx
                        for i:=len(yobs[dy])-1;i>=0;i-- {
                                if yobs[dy][i]<=dd &&yobs[dy][i]>sx {
                                        dd = yobs[dy][i]-1
                                }
                        }
                        return dd,dy
                } else {
                        dd := dx
                        for i:=0;i<len(yobs[sy]);i++ {
                                if yobs[sy][i]>=dd&&yobs[sy][i]<sx {
                                        dd = yobs[sy][i]+1
                                }
                        }
                        return dd,dy
                }
        }
}
func dis(x,y int) int {
        if x<0 {x*=-1}
        if y<0 {y*=-1}
        return x*x+y*y
}